<div class="main-submission">
  <div class="header-submission">
  <h1 class="submission-text">Submission list</h1>
  </div>
  <div class="submission-application">
    <a class="submission-btn" href="createSubmission">Add New</a>
    <div class="table-wrapper__submission">
    <table class="table-submission">
      <thead>
        <tr>
          <th>Name</th>
          <th>Deadline_1</th>
          <th>Deadline_2</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="submission-list">
        {{#each submission}}
        <tr class="submission-list__main">
          <td class="submission-list__text">{{this.name}}</td>
          <td class="submission-list__text">{{moment this.deadline_1 format ="DD MMM YYYY HH:mm:ss a" }}</td>
          <td class="submission-list__text">{{moment this.deadline_2 format ="DD MMM YYYY HH:mm:ss a" }}</td>
          <td class="actions">
            <a href="/managements/{{this._id}}/editSubmission" class="category-btn__edit">edit</a>
            <a href="" data-id="{{this._id}}" class="category-btn__remove" data-bs-toggle="modal"
              data-bs-target="#delete-submission">Delete</a>
          </td>
        </tr>
        {{/each}}
      </tbody>
    </table>
    <span title="Total Count Submission" class="show__count-submission">{{count}}</span>
    <ul class="listpage"></ul>
    </div>
    {{!-- responsive table --}}
<div class="table-responsive">
  {{#each submission}}
  <div class="table-responsive-wrapper">
  <div class="title-table">
    <span class="name-title">Name</span>
    <span class="deadline-title">Deadline_1</span>
    <span class="deadline-title">Deadline_2</span>
    <span class="actions-title">Actions</span>
  </div>
    <div class="main-table">
      <span title="{{this.name}}" class="name-main">{{this.name}}</span>
      <span title="{{moment this.deadline_1 format ="DD MMM YYYY HH:mm:ss a" }}" class="deadline-main">{{moment this.deadline_1 format ="DD MMM YYYY HH:mm:ss a" }}</span>
      <span title="{{moment this.deadline_2 format ="DD MMM YYYY HH:mm:ss a" }}" class="deadline-main">{{moment this.deadline_2 format ="DD MMM YYYY HH:mm:ss a" }}</span>
      <div class="actions-main">
        <a href="/managements/{{this._id}}/editSubmission" class="category-btn__edit">edit</a>
              <a href="" data-id="{{this._id}}" class="category-btn__remove" data-bs-toggle="modal"
                data-bs-target="#delete-submission">Delete</a>
      </div>
    </div>
    </div>
  {{/each}}
    <ul class="listpageRP"></ul>
</div>
  </div>
</div>

{{!-- confirm delete --}}

<div id="delete-submission" class="modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Do you wanna Delete this Submission</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure about it ?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancle</button>
        <button id="btn-delete-submission" type="button" class="btn btn-danger">Delete</button>
      </div>
    </div>
  </div>
</div>

{{!-- delete hidden form --}}
<form method="POST" name="delete-submission-form"></form>

<script>
  const deleteSubmission = document.getElementById('delete-submission')
  var submissionID;
  var btnDeleteSubmission = document.getElementById('btn-delete-submission')
  var deleteForm = document.forms['delete-submission-form'];
  deleteSubmission.addEventListener('show.bs.modal', event => {
    const button = event.relatedTarget
    submissionID = button.getAttribute('data-id')


    btnDeleteSubmission.onclick = function () {
      deleteForm.action = '/managements/DS/' + submissionID + '?_method=DELETE';
      deleteForm.submit();
    }
  })
  var thisPage = 1;
  var limit = 5;
  var list = document.querySelectorAll('.submission-list__main')
  function loadIteam() {
    var beginGet = limit * (thisPage - 1);
    var endGet = limit * thisPage - 1;
    list.forEach((item, key) => {
      if (key >= beginGet && key <= endGet) {
        item.style.display = 'table-row';
      } else {
        item.style.display = 'none';
      }
    })
    listPage();
  }
  loadIteam()
  function listPage() {
    var count = Math.ceil(list.length / limit);
    document.querySelector('.listpage').innerHTML = '';
    for (i = 1; i <= count; i++) {
      var newPage = document.createElement('li');
      newPage.innerHTML = i;
      document.querySelector('.listpage').appendChild(newPage);
      newPage.setAttribute('onclick', "changePage(" + i + ")");
      if (i === thisPage) {
      newPage.classList.add('active');
    }
    }
  }
  function changePage(i) {
    thisPage = i;
    document.querySelectorAll('.listpage li').forEach(function(page) {
    page.classList.remove('active');
  });
  document.querySelector('.listpage li:nth-child(' + (thisPage) + ')').classList.add('active');
    loadIteam()
  }
  const urlParams = new URLSearchParams(window.location.search);
    const message = urlParams.get('message');
    if (message) {
        const alertDiv = document.createElement('div');
        alertDiv.classList.add('login-error', 'alert-managements');
        alertDiv.innerHTML = message;
        document.body.appendChild(alertDiv);
    }
    let mainTables = document.querySelectorAll('.main-table');
if (mainTables.length % 2 !== 0) {
  // Nếu số lượng phần tử là số lẻ, bỏ qua phần tử cuối cùng
  mainTables = Array.from(mainTables).slice(0, mainTables.length - 1);
}
for (let i = 0; i < mainTables.length; i++) {
  if (i % 2 === 1) {
    mainTables[i].classList.add('change-background');
  }
}
 var thisPageRP = 1;
var limitRP = 5;
var listRP = document.querySelectorAll('.table-responsive-wrapper');

function loadIteamRP() {
  var beginGetRP = limitRP * (thisPageRP - 1);
  var endGetRP = limitRP * thisPageRP - 1;

  listRP.forEach((item, key) => {
    if (key >= beginGetRP && key <= endGetRP) {
      item.style.display = 'flex';
    } else {
      item.style.display = 'none';
    }
  });

  listPageRP();
}
loadIteamRP();
function listPageRP() {
  var countRP = Math.ceil(listRP.length / limitRP);
  document.querySelector('.listpageRP').innerHTML = '';
  for (i = 1; i <= countRP; i++) {
    var newPageRP = document.createElement('li');
    newPageRP.innerHTML = i;
    document.querySelector('.listpageRP').appendChild(newPageRP);
    newPageRP.setAttribute('onclick', "changePageRP(" + i + ")");

    if (i === thisPageRP) {
      newPageRP.classList.add('active');
    }
  }
}
function changePageRP(i) {
  thisPageRP = i;
  document.querySelectorAll('.listpageRP li').forEach(function(page) {
    page.classList.remove('active');
  });

  document.querySelector('.listpageRP li:nth-child(' + (thisPageRP) + ')').classList.add('active');
  loadIteamRP();
}

</script>